# Clean PeakNet Pipeline Configuration
# Framework-agnostic configuration without Hydra/OmegaConf dependencies

model:
  weights_path: null  # No weights = randomly initialized model (but REAL GPU computation!)

  # Simplified PeakNet configuration - no complex nested structures
  peaknet_config:
    model:
      # Basic model parameters
      image_size: 1920
      num_channels: 1
      num_classes: 2

      # Backbone configuration
      backbone_hidden_sizes: [96, 192, 384, 768]
      backbone_depths: [3, 3, 9, 3]

      # BiFPN configuration  
      bifpn_num_blocks: 2
      bifpn_num_features: 256

      # Segmentation head configuration
      seg_out_channels: 256

      # Other settings
      from_scratch: false

runtime:
  max_actors: 9           # Multi-GPU profiling
  batch_size: 16          # Reasonable for large images
  num_producers: 8        # Multiple producers for throughput
  batches_per_producer: 32 # 32 * 8 producers = 256 batches total
  total_samples: 4096     # Sufficient for profiling (reduced for initial test)
  inter_batch_delay: 0.01 # Moderate streaming rate
  memory_sync_interval: 0  # Sync every N batches for memory management (0=disable)
  queue_num_shards: 4     # Number of queue shards for parallel access
  queue_maxsize_per_shard: 2000  # Max items per shard (total capacity = 4 * 2000 = 8000)
  # Queue naming configuration
  queue_names:
    input_queue: "peaknet_q1"   # Q1: Data producer → Inference actors
    output_queue: "peaknet_q2"  # Q2: Inference actors → Post-processor

data:
  shape: [1, 1920, 1920]  # Full resolution as requested (channels inferred from shape[0])

transforms:
  # Shape conversion from socket/detector data to model input format
  add_channel_dimension: true   # Convert (H, W) -> (C, H, W) or (B, H, W) -> (B, C, H, W)
  num_channels: 1              # Number of channels to add (usually 1 for detector data)
  channel_dim: 1               # Position to insert channel dimension (after batch)

  # Padding to normalize size differences (e.g., 1691x1691 -> 1920x1920)
  pad_to_target: true          # Pad to match model input size (from data.shape)
  pad_style: center            # Padding style: 'center' or 'bottom-right'

  # Note: Target size is automatically inferred from data.shape

# Data source configuration - supports both random and socket data
data_source:
  source_type: random     # Use "random" for synthetic data, "socket" for LCLStreamer

  # Socket connection settings (used when source_type: socket)
  socket_hostname: localhost  # Change to actual hostname (e.g., sdfada015)
  socket_port: 12321          # Default LCLStreamer port
  socket_timeout: 300.0       # Socket receive timeout in seconds
  socket_retry_attempts: 5    # Number of connection retry attempts

  # HDF5 field mapping (must match LCLStreamer configuration)
  fields:
    detector_data: "/data/data"           # Main image data from detector
    timestamp: "/data/timestamp"          # Event timestamp
    photon_wavelength: "/data/wavelength" # Photon wavelength/energy
    random: "/data/random"                # Random array (if included by LCLStreamer)

  # Direct batch pass-through: trust pusher to provide appropriately sized batches
  batch_assembly: false       # Disable artificial batch assembly - use pusher's batches directly
  # batch_timeout: removed    # No timeout needed with direct pass-through

  # Required fields for validation
  required_fields: ["detector_data"]  # Fields that must be present in each HDF5 message

system:
  min_gpus: 1             # Minimum GPUs required
  skip_gpu_validation: false
  pin_memory: true        # Better GPU transfer performance
  verify_actors: true     # Verify GPU health

profiling:
  enable_profiling: true  # NSys profiling enabled for performance analysis
  output_dir: "./profiling_results"

output:
  output_dir: "./test_results"
  verbose: true           # Detailed output for analysis
  quiet: false

# Ray cluster configuration
ray:
  namespace: "peaknet-pipeline"  # Named namespace for actor discovery and multi-deployment support

# Usage Examples:
#
# 1. Random data (default):
#    peaknet-pipeline --config examples/configs/peaknet.yaml
#
# 2. Socket data from LCLStreamer:
#    peaknet-pipeline --config examples/configs/peaknet.yaml --data-source socket --socket-hostname sdfada015
#
# 3. Override settings via CLI:
#    peaknet-pipeline --config examples/configs/peaknet.yaml --max-actors 4 --total-samples 1024 --verbose
#
# 4. Transform options (if needed):
#    peaknet-pipeline --config examples/configs/peaknet.yaml --add-channel-dimension --pad-to-target
#
# Key Features:
# - Complete transform configuration support (CLI + YAML)
# - Direct batch pass-through eliminates timeout warnings
# - Support for both random and socket data sources
# - Variable batch sizes automatically handled
# - Transforms: (1691,1691) → (1,1691,1691) → (1,1920,1920)